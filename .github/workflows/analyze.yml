name: SonarCloud
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build \
                           clang-14 \
                           xorg-dev \
                           python3-dev \
                           python3-venv \
                           gfortran \
                           autoconf \
                           ccache \
                           mesa-common-dev \
                           mesa-utils \
                           freeglut3-dev \
                           libtool \
                           libgtest-dev \
                           libxcb-shm0 \
                           libglu1-mesa-dev \
                           libc++-dev \
                           libc++abi-dev \
                           libsdl2-dev \
                           libxi-dev \
                           libtbb-dev \
                           libosmesa6-dev \
                           libudev-dev \
                           # libfilament-dev \
                           libvtk9-dev \
                           libassimp-dev \
                           libeigen3-dev \
                           # libfmt-dev \
                           libglew-dev \
                           libglfw3-dev \
                           libgtest-dev \
                           libimgui-dev \
                           libjpeg-dev \
                           libjsoncpp-dev \
                           liblzf-dev \
                           libmsgpack-dev \
                           libnanoflann-dev \
                           libpng-dev \
                           pybind11-dev \
                           libqhullcpp8.0 \
                           libtbb-dev \
                           libtinygltf-dev \
                           libtinyobjloader-dev
      - name: Generate build files
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug \
                   -DCMAKE_CXX_STANDARD=17 \
                   -DCMAKE_C_COMPILER=/usr/bin/clang-14 \
                   -DCMAKE_CXX_COMPILER=/usr/bin/clang++-14 \
                   -DBUILD_SHARED_LIBS=OFF \
                   -DBUILD_PYTHON_MODULE=OFF \
                   -DBUILD_UNIT_TESTS=ON \
                   -DBUILD_EXAMPLES=ON \
                   -DBUILD_BENCHMARKS=ON \
                   -DBUILD_VTK_FROM_SOURCE=OFF \
                   -DBUILD_FILAMENT_FROM_SOURCE=OFF \
                   -DBUILD_CURL_FROM_SOURCE=ON \
                   -DUSE_SYSTEM_ASSIMP=ON \
                   -DUSE_SYSTEM_EIGEN3=ON \
                   -DUSE_SYSTEM_FILAMENT=OFF \
                   -DUSE_SYSTEM_FMT=OFF \
                   -DUSE_SYSTEM_GLEW=ON \
                   -DUSE_SYSTEM_GLFW=ON \
                   -DUSE_SYSTEM_GOOGLETEST=ON \
                   -DUSE_SYSTEM_IMGUI=ON \
                   -DUSE_SYSTEM_JPEG=ON \
                   -DUSE_SYSTEM_JSONCPP=ON \
                   -DUSE_SYSTEM_LIBLZF=ON \
                   -DUSE_SYSTEM_MSGPACK=ON \
                   -DUSE_SYSTEM_NANOFLANN=ON \
                   -DUSE_SYSTEM_PNG=ON \
                   -DUSE_SYSTEM_PYBIND11=ON \
                   -DUSE_SYSTEM_QHULLCPP=ON \
                   -DUSE_SYSTEM_TBB=ON \
                   -DUSE_SYSTEM_TINYGLTF=ON \
                   -DUSE_SYSTEM_TINYOBJLOADER=ON \
                   -DUSE_SYSTEM_ZEROMQ=OFF
      - name: Run build-wrapper
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make -j$(nproc) -C build Open3D
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
